#!/usr/bin/env python3

import subprocess
import numpy as np
import matplotlib.pyplot as plt

long_or_short = str(input("Short test [s] or long test [l]? Short ~ 3 min, Long ~ 20 min   "))
if long_or_short=='s':
	tfinal="0.05"
	nts=120
elif long_or_short=='l':
	tfinal="0.25"
	nts=669
else:
	print("Input wasn't s or l. Assuming s.")
	tfinal="0.05"
	nts=120

subprocess.run(["mkdir", "-p", "./tempdir_residual_test/low_res"])
subprocess.run(["mkdir", "-p", "./tempdir_residual_test/high_res"])

subprocess.run(["binary2d ../setups/residual_test.yaml mesh.block_size=64 control.output_directory=./tempdir_residual_test/low_res control.num_orbits="+tfinal], shell=True)

fn         = "./tempdir_residual_test/low_res/"
Nchkpts    = range(0,int(nts+3),1)
exec(open('indep_res_analysis.py').read())
rhores_L2_low  =  rhores_L2*1
momxres_L2_low = momxres_L2*1
momyres_L2_low = momyres_L2*1
enres_L2_low   =   enres_L2*1
t_low          =          t*1

subprocess.run(["binary2d ../setups/residual_test.yaml mesh.block_size=128 control.output_directory=./tempdir_residual_test/high_res control.num_orbits="+tfinal], shell=True)

fn         = "./tempdir_residual_test/high_res/"
Nchkpts    = range(0,int(2*nts+2),1)
exec(open('./indep_res_analysis.py').read())
rhores_L2_high  =  rhores_L2*1
momxres_L2_high = momxres_L2*1
momyres_L2_high = momyres_L2*1
enres_L2_high   =   enres_L2*1
t_high          =          t*1

rhoconv  = np.average( np.log(  rhores_L2_low/ rhores_L2_high[::2] ) / np.log(2) )
momxconv = np.average( np.log( momxres_L2_low/momxres_L2_high[::2] ) / np.log(2) )
momyconv = np.average( np.log( momyres_L2_low/momyres_L2_high[::2] ) / np.log(2) )
enconv   = np.average( np.log(   enres_L2_low/  enres_L2_high[::2] ) / np.log(2) )

print(" ")
print(" ")
print(" ")
print("Expected convergence order is roughly 1.5.")
print("If less than ~1.25, something may be wrong.")
print("If greater than ~2, something may be wrong.")
print(" ")
print(" ")
print(" ")
print("Mass continuity equation is being solved at order "+str(rhoconv))
print("x-Momentum equation is being solved at order "+str(momxconv))
print("y-Momentum equation is being solved at order "+str(momyconv))
print("Energy equation is being solved at order "+str(enconv))
print(" ")
print(" ")
print(" ")

userplot = str(input("Plot results? [y/n]"))
if userplot=='y' or userplot=='Y':
	usersave = str(input("Save plot? [y/n]"))
	fig = plt.figure(figsize=(12,12))
	fig.subplots_adjust(left=0.08,right=1-0.01,bottom=0.06,top=1-0.08,wspace=0.25,hspace=0.25)
	ax1 = fig.add_subplot(221)
	ax2 = fig.add_subplot(222)
	ax3 = fig.add_subplot(223)
	ax4 = fig.add_subplot(224)
	s   = 2**(1.5)
	p   = 1./2/np.pi
	ax1.plot(p*t_low ,  rhores_L2_low   , label=r'low res' )
	ax1.plot(p*t_high,  rhores_L2_high  , label=r'high res')
	ax1.plot(p*t_high,  rhores_L2_high*s, label=r'high res $\times 2^{1.5}$')
	ax2.plot(p*t_low , momxres_L2_low   , label=r'low res' )
	ax2.plot(p*t_high, momxres_L2_high  , label=r'high res')
	ax2.plot(p*t_high, momxres_L2_high*s, label=r'high res $\times 2^{1.5}$')
	ax3.plot(p*t_low , momyres_L2_low   , label=r'low res' )
	ax3.plot(p*t_high, momyres_L2_high  , label=r'high res')
	ax3.plot(p*t_high, momyres_L2_high*s, label=r'high res $\times 2^{1.5}$')
	ax4.plot(p*t_low ,   enres_L2_low   , label=r'low res' )
	ax4.plot(p*t_high,   enres_L2_high  , label=r'high res')
	ax4.plot(p*t_high,   enres_L2_high*s, label=r'high res $\times 2^{1.5}$')
	max1 = np.amax([np.amax( rhores_L2_low), np.amax( rhores_L2_high)])
	min1 = np.amin([np.amin( rhores_L2_low), np.amin( rhores_L2_high)])
	max2 = np.amax([np.amax(momxres_L2_low), np.amax(momxres_L2_high)])
	min2 = np.amin([np.amin(momxres_L2_low), np.amin(momxres_L2_high)])
	max3 = np.amax([np.amax(momyres_L2_low), np.amax(momyres_L2_high)])
	min3 = np.amin([np.amin(momyres_L2_low), np.amin(momyres_L2_high)])
	max4 = np.amax([np.amax(  enres_L2_low), np.amax(  enres_L2_high)])
	min4 = np.amin([np.amin(  enres_L2_low), np.amin(  enres_L2_high)])
	ax1.plot([0.2,0.2],[min1*0.5,max1*2],'k--',lw=1)
	ax2.plot([0.2,0.2],[min2*0.5,max2*2],'k--',lw=1)
	ax3.plot([0.2,0.2],[min3*0.5,max3*2],'k--',lw=1)
	ax4.plot([0.2,0.2],[min4*0.5,max4*2],'k--',lw=1)
	ax1.text(0.21,min1,"shocks form")
	ax2.text(0.21,min2,"shocks form")
	ax3.text(0.21,min3,"shocks form")
	ax4.text(0.21,min4,"shocks form")
	if long_or_short=='l':
		ax1.set_xlim(0,0.27)
		ax2.set_xlim(0,0.27)
		ax3.set_xlim(0,0.27)
		ax4.set_xlim(0,0.27)
	else:
		ax1.set_xlim(0,np.float(tfinal))
		ax2.set_xlim(0,np.float(tfinal))
		ax3.set_xlim(0,np.float(tfinal))
		ax4.set_xlim(0,np.float(tfinal))
	ax1.set_ylim(0.8*min1,1.2*max1)
	ax2.set_ylim(0.8*min2,1.2*max2)
	ax3.set_ylim(0.8*min3,1.2*max3)
	ax4.set_ylim(0.8*min4,1.2*max4)
	ax1.set_title("Mass continuity residual")
	ax2.set_title("x-Momentum residual")
	ax3.set_title("y-Momentum residual")
	ax4.set_title("Energy residual")
	ax1.set_xlabel("time [orbits]")
	ax2.set_xlabel("time [orbits]")
	ax3.set_xlabel("time [orbits]")
	ax4.set_xlabel("time [orbits]")
	ax1.legend()
	fig.suptitle("Global residuals under L2-norm")
	if usersave=='y' or usersave=='Y':
		print("Saving plot as test_result.pdf")
		plt.savefig("test_result.pdf")
	plt.show()


delete = str(input("Delete test data? [y/n]"))
if delete=='y' or delete=='Y':
	subprocess.run(["rm -r ./tempdir_residual_test/"], shell=True)
